package exam;

import java.math.BigInteger;

public class AsymmetricOnlyRSA {
	
	public static void main(String[]args)
	{
		BigInteger n = new BigInteger("94587468335128982981605019776781234618384857805657005686084562260910788622013722070926491690843853690071248130134427832324966728582532832363221542231787068203763027067400082835394459857525017707284768411819006776211493735326500782954621660256501187035611332577696332459049538105669711385995976912007767106063");
		BigInteger e = new BigInteger("74327");
		BigInteger d = new BigInteger("7289370196881601766768920490284861650464951706793000236386405648425161747775298344104658393385359209126267833888223695609366844098655240542152017354442883676634193191857568369042999854440242050353181703706753485749165295123694487676952198090537385200990850805837963871485320168470788328336240930212290450023");
		BigInteger ct = new BigInteger("87014856975716299121085087309577038316883175412853820115551293556230488405826385706604303724175236985573832006395540199066061101502996745421485579743246846982636317440505885092956723199407403632041108913018671613508572002898008615700858579079601105011909417884801902333329415712320494308682279897714456370814");
		
		BigInteger pt = ct.modPow(d, n);
		
		byte[] plaintext = pt.toByteArray();
		
		for(int i = 0; i<plaintext.length;i++)
		{
			System.out.print((char)plaintext[i]);
		}
		
		System.out.println();
		
		/*
		 * Key Generation
		 *  Choose two large prime p, q 
		 *  Compute n = p * q 
		 *  Compute phi(n) = (p-1)(q-1)
		 *  select the public exponent e = {0,1....,phi(n)-1} such that gcd(e,phi(n)) = 1 
		 *  Compute private key d such that d * e = 1 mod phi(n) 
		 *  Return Kpub(n,e) Kpri = d
		 */
		
		/*
		 * Choosing Small public exponent e does not weaken the security of RSA (for fast encryption) 
		 * 
		 */
		
		BigInteger p = new BigInteger("10358344307803887695931304169230543785620607743682421994532795393937342395753127888522373061586445417642355843316524942445924294144921649080401518286829171");
		BigInteger e1 = new BigInteger("74327");
		BigInteger n1 = new BigInteger("94587468335128982981605019776781234618384857805657005686084562260910788622013722070926491690843853690071248130134427832324966728582532832363221542231787068203763027067400082835394459857525017707284768411819006776211493735326500782954621660256501187035611332577696332459049538105669711385995976912007767106063");
		BigInteger c = new BigInteger("10870101966939556606443697147757930290262227730644958783498257036423105365610629529910525828464329792615002602782366786531253275463358840412867833406256467153345139501952173409955322129689670345445632775574301781800376545448990332608558103266831217073027652061091790342124418143422318965525239492387183438956");
		BigInteger q = n1.divide(p);
		BigInteger phi = p.subtract(BigInteger.ONE).multiply(q.subtract(BigInteger.ONE));
		BigInteger d1 = e.modInverse(phi);
		
		BigInteger pt1 = c.modPow(d1, n1);
		
		byte[] plain = pt1.toByteArray();
		
		for(int i = 0; i<plain.length;i++)
		{
			System.out.print((char)plain[i]);
		}
		
	}

}
